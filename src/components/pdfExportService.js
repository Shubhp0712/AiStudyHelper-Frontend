import jsPDF from 'jspdf';
// import html2canvas from 'html2canvas'; // Reserved for future chart export functionality

class PDFExportService {

    // Export flashcards as PDF
    async exportFlashcardsToPDF(flashcards, topic = 'Study Material') {
        try {
            console.log('Starting flashcard PDF export...');

            const pdf = new jsPDF('p', 'mm', 'a4');
            const pageWidth = pdf.internal.pageSize.getWidth();
            const pageHeight = pdf.internal.pageSize.getHeight();
            const margin = 20;
            const contentWidth = pageWidth - (margin * 2);

            // Header
            pdf.setFontSize(20);
            pdf.setFont('helvetica', 'bold');
            pdf.text('🧠 AI Study Assistant - Flashcards', margin, 30);

            pdf.setFontSize(14);
            pdf.setFont('helvetica', 'normal');
            pdf.text(`Topic: ${topic}`, margin, 45);
            pdf.text(`Generated: ${new Date().toLocaleDateString()}`, margin, 55);
            pdf.text(`Total Cards: ${flashcards.length}`, margin, 65);

            // Add separator line
            pdf.setLineWidth(0.5);
            pdf.line(margin, 75, pageWidth - margin, 75);

            let currentY = 90;
            const cardHeight = 60;
            const questionAnswerGap = 8;

            flashcards.forEach((card, index) => {
                // Check if we need a new page
                if (currentY + cardHeight > pageHeight - margin) {
                    pdf.addPage();
                    currentY = 30;
                }

                // Card number and border
                pdf.setFontSize(12);
                pdf.setFont('helvetica', 'bold');
                pdf.text(`Card ${index + 1}`, margin, currentY);

                // Card border
                pdf.setLineWidth(0.3);
                pdf.rect(margin, currentY + 5, contentWidth, cardHeight - 10);

                // Question
                pdf.setFontSize(11);
                pdf.setFont('helvetica', 'bold');
                pdf.text('Q:', margin + 5, currentY + 15);

                pdf.setFont('helvetica', 'normal');
                const questionLines = pdf.splitTextToSize(card.question, contentWidth - 20);
                pdf.text(questionLines, margin + 15, currentY + 15);

                const questionHeight = questionLines.length * 5;

                // Answer
                pdf.setFont('helvetica', 'bold');
                pdf.text('A:', margin + 5, currentY + 25 + questionHeight + questionAnswerGap);

                pdf.setFont('helvetica', 'normal');
                const answerLines = pdf.splitTextToSize(card.answer, contentWidth - 20);
                pdf.text(answerLines, margin + 15, currentY + 25 + questionHeight + questionAnswerGap);

                currentY += cardHeight + 10;
            });

            // Footer on last page
            const totalPages = pdf.getNumberOfPages();
            for (let i = 1; i <= totalPages; i++) {
                pdf.setPage(i);
                pdf.setFontSize(8);
                pdf.setFont('helvetica', 'normal');
                pdf.text(`Generated by AI Study Assistant | Page ${i} of ${totalPages}`,
                    margin, pageHeight - 10);
            }

            // Download the PDF
            pdf.save(`${topic.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_flashcards.pdf`);
            console.log('Flashcard PDF exported successfully');

        } catch (error) {
            console.error('Error exporting flashcards to PDF:', error);
            throw error;
        }
    }

    // Export progress report as PDF
    async exportProgressToPDF(progress, analytics) {
        try {
            console.log('Starting progress PDF export...');

            const pdf = new jsPDF('p', 'mm', 'a4');
            const pageWidth = pdf.internal.pageSize.getWidth();
            const pageHeight = pdf.internal.pageSize.getHeight();
            const margin = 20;
            const contentWidth = pageWidth - (margin * 2);

            // Header
            pdf.setFontSize(20);
            pdf.setFont('helvetica', 'bold');
            pdf.text('📊 Study Progress Report', margin, 30);

            pdf.setFontSize(12);
            pdf.setFont('helvetica', 'normal');
            pdf.text(`Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`, margin, 45);

            // Add separator line
            pdf.setLineWidth(0.5);
            pdf.line(margin, 55, pageWidth - margin, 55);

            let currentY = 70;

            // Overall Statistics
            pdf.setFontSize(16);
            pdf.setFont('helvetica', 'bold');
            pdf.text('📈 Overall Statistics', margin, currentY);
            currentY += 15;

            pdf.setFontSize(11);
            pdf.setFont('helvetica', 'normal');

            const stats = [
                `Total Study Time: ${this.formatTime(progress?.totalStudyTime || 0)}`,
                `Topics Studied: ${progress?.topicsStudied || 0}`,
                `Flashcards Created: ${progress?.flashcardsCreated || 0}`,
                `Study Sessions: ${progress?.totalSessions || 0}`,
                `Current Streak: ${progress?.currentStreak || 0} days`,
                `Best Streak: ${progress?.bestStreak || 0} days`
            ];

            stats.forEach(stat => {
                pdf.text(`• ${stat}`, margin + 5, currentY);
                currentY += 6;
            });

            currentY += 10;

            // Recent Activity
            if (analytics?.recentActivity?.length > 0) {
                pdf.setFontSize(16);
                pdf.setFont('helvetica', 'bold');
                pdf.text('🕐 Recent Activity', margin, currentY);
                currentY += 15;

                pdf.setFontSize(11);
                pdf.setFont('helvetica', 'normal');

                analytics.recentActivity.slice(0, 10).forEach(activity => {
                    const date = new Date(activity.date).toLocaleDateString();
                    const text = `${date}: ${activity.type} - ${activity.details}`;
                    const lines = pdf.splitTextToSize(text, contentWidth - 10);
                    pdf.text(lines, margin + 5, currentY);
                    currentY += lines.length * 5 + 2;

                    // Check if we need a new page
                    if (currentY > pageHeight - 40) {
                        pdf.addPage();
                        currentY = 30;
                    }
                });

                currentY += 10;
            }

            // Study Performance
            if (analytics?.performance) {
                pdf.setFontSize(16);
                pdf.setFont('helvetica', 'bold');
                pdf.text('⭐ Performance Metrics', margin, currentY);
                currentY += 15;

                pdf.setFontSize(11);
                pdf.setFont('helvetica', 'normal');

                const performance = [
                    `Average Session Length: ${this.formatTime(analytics.performance.avgSessionLength || 0)}`,
                    `Most Active Day: ${analytics.performance.mostActiveDay || 'N/A'}`,
                    `Favorite Study Time: ${analytics.performance.favoriteStudyTime || 'N/A'}`,
                    `Total Quiz Attempts: ${analytics.performance.totalQuizAttempts || 0}`,
                    `Average Quiz Score: ${analytics.performance.avgQuizScore || 0}%`
                ];

                performance.forEach(metric => {
                    pdf.text(`• ${metric}`, margin + 5, currentY);
                    currentY += 6;
                });
            }

            // Footer
            const totalPages = pdf.getNumberOfPages();
            for (let i = 1; i <= totalPages; i++) {
                pdf.setPage(i);
                pdf.setFontSize(8);
                pdf.setFont('helvetica', 'normal');
                pdf.text(`Generated by AI Study Assistant | Page ${i} of ${totalPages}`,
                    margin, pageHeight - 10);
            }

            // Download the PDF
            const filename = `study_progress_report_${new Date().toISOString().split('T')[0]}.pdf`;
            pdf.save(filename);
            console.log('Progress PDF exported successfully');

        } catch (error) {
            console.error('Error exporting progress to PDF:', error);
            throw error;
        }
    }

    // Helper method to format time
    formatTime(timeInMinutes) {
        if (!timeInMinutes || timeInMinutes === 0) return '0 minutes';

        if (timeInMinutes < 60) {
            return `${Math.round(timeInMinutes)} minutes`;
        } else if (timeInMinutes < 1440) { // less than 24 hours
            const hours = Math.floor(timeInMinutes / 60);
            const minutes = Math.round(timeInMinutes % 60);
            return minutes > 0 ? `${hours}h ${minutes}m` : `${hours}h`;
        } else {
            const days = Math.floor(timeInMinutes / 1440);
            const hours = Math.floor((timeInMinutes % 1440) / 60);
            return hours > 0 ? `${days}d ${hours}h` : `${days}d`;
        }
    }
}

// eslint-disable-next-line import/no-anonymous-default-export
const pdfService = new PDFExportService();
export default pdfService;
